///*
//    Copyright (C) 2016 Veronneau Techno. Conseil inc.
//    For any questions you have regarding the solftware, feel free to get in touch by email.
//    info@vertechcon.net

//    This program is free software: you can redistribute it and/or modify
//    it under the terms of the GNU General Public License as published by
//    the Free Software Foundation, either version 3 of the License, or
//    (at your option) any later version.

//    This program is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//    GNU General Public License for more details.

//    You should have received a copy of the GNU General Public License
//    along with this program.  If not, see <http://www.gnu.org/licenses/>.
//*/

//using System;
//using System.Collections.Generic;
//using System.Linq;
//using System.Linq.Expressions;
//using System.Reflection.Emit;
//using System.Text;
//using System.Threading.Tasks;
//using Verstech.DynamicLibraries.Core.Compilable;

//namespace Vertechcon.DynamicLibraries.Compilable.MethodConstructors
//{
//    /// <summary>
//    /// Base class used to allow construction of custom expressions that return void
//    /// </summary>
//    public abstract class ExpressionTreeActionDelegateBuilder : MethodConstructorBase, IMethodInjector
//    {
//        /// <summary>
//        /// Method to implement in order to construct the expression intended to be injected in the dynamic type
//        /// </summary>
//        /// <returns></returns>
//        protected abstract Expression<Action> Create();

//        /// <summary>
//        /// Creates a delegate pointing to the compiled method created using the expression tree
//        /// </summary>
//        /// <returns></returns>
//        public Action Delegate()
//        {
//            return this.CreateDelegate<Action>();
//        }

//        /// <summary>
//        /// Generates a dynamically compiled method using the expression tree generated by the Create method
//        /// </summary>
//        /// <returns></returns>
//        public Action Build()
//        {
//            var ex = Create();
//            return ex.Compile();
//        }

//        /// <summary>
//        /// Injection method used to push the expression into the method definition
//        /// </summary>
//        /// <param name="methodBuilder"></param>
//        public override void Inject(MethodDefinition methodDefinition)
//        {
//            var ex = Create();
//            methodDefinition.SetMethodBody(ex.ToString());
//        }
//    }

//    /// <summary>
//    /// Base class used to allow construction of custom expressions that return void
//    /// </summary>
//    public abstract class ExpressionTreeActionDelegateBuilder<TParam> : MethodConstructorBase, IMethodInjector
//    {
//        /// <summary>
//        /// Method to implement in order to construct the expression intended to be injected in the dynamic type
//        /// </summary>
//        /// <returns></returns>
//        protected abstract Expression<Action<TParam>> Create();

//        /// <summary>
//        /// Creates a delegate pointing to the compiled method created using the expression tree
//        /// </summary>
//        /// <returns></returns>
//        public Action<TParam> Delegate()
//        {
//            return this.CreateDelegate<Action<TParam>>();
//        }

//        /// <summary>
//        /// Generates a dynamically compiled method using the expression tree generated by the Create method
//        /// </summary>
//        /// <returns></returns>
//        public Action<TParam> Build()
//        {
//            var ex = Create();
//            return ex.Compile();
//        }

//        /// <summary>
//        /// Injects the expression tree generated by the Create method into a method builder associated to a dynamic assembly
//        /// </summary>
//        /// <param name="methodBuilder"></param>
//        public override void Inject(MethodBuilder methodBuilder)
//        {
//            var ex = Create();
//            ex.CompileToMethod(methodBuilder);
//        }
//    }

//    /// <summary>
//    /// Base class used to allow construction of custom expressions that return void
//    /// </summary>
//    public abstract class ExpressionTreeActionDelegateBuilder<TParam, TParam1> : MethodConstructorBase, IMethodInjector
//    {
//        /// <summary>
//        /// Method to implement in order to construct the expression intended to be injected in the dynamic type
//        /// </summary>
//        /// <returns></returns>
//        protected abstract Expression<Action<TParam, TParam1>> Create();

//        /// <summary>
//        /// Creates a delegate pointing to the compiled method created using the expression tree
//        /// </summary>
//        /// <returns></returns>
//        public Action<TParam, TParam1> Delegate()
//        {
//            return this.CreateDelegate<Action<TParam, TParam1>>();
//        }

//        /// <summary>
//        /// Generates a dynamically compiled method using the expression tree generated by the Create method
//        /// </summary>
//        /// <returns></returns>
//        public Action<TParam, TParam1> Build()
//        {
//            var ex = Create();
//            return ex.Compile();
//        }

//        /// <summary>
//        /// Injects the expression tree generated by the Create method into a method builder associated to a dynamic assembly
//        /// </summary>
//        /// <param name="methodBuilder"></param>
//        public override void Inject(MethodBuilder methodBuilder)
//        {
//            var ex = Create();
//            ex.CompileToMethod(methodBuilder);
//        }
//    }

//    /// <summary>
//    /// Base class used to allow construction of custom expressions that return void
//    /// </summary>
//    public abstract class ExpressionTreeActionDelegateBuilder<TParam, TParam1, TParam2> : MethodConstructorBase, IMethodInjector
//    {
//        /// <summary>
//        /// Method to implement in order to construct the expression intended to be injected in the dynamic type
//        /// </summary>
//        /// <returns></returns>
//        protected abstract Expression<Action<TParam, TParam1, TParam2>> Create();

//        /// <summary>
//        /// Creates a delegate pointing to the compiled method created using the expression tree
//        /// </summary>
//        /// <returns></returns>
//        public Action<TParam, TParam1, TParam2> Delegate()
//        {
//            return this.CreateDelegate<Action<TParam, TParam1, TParam2>>();
//        }

//        /// <summary>
//        /// Generates a dynamically compiled method using the expression tree generated by the Create method
//        /// </summary>
//        /// <returns></returns>
//        public Action<TParam, TParam1, TParam2> Build()
//        {
//            var ex = Create();
//            return ex.Compile();
//        }

//        /// <summary>
//        /// Injects the expression tree generated by the Create method into a method builder associated to a dynamic assembly
//        /// </summary>
//        /// <param name="methodBuilder"></param>
//        public override void Inject(MethodBuilder methodBuilder)
//        {
//            var ex = Create();
//            ex.CompileToMethod(methodBuilder);
//        }
//    }

//    /// <summary>
//    /// Base class used to allow construction of custom expressions that return void
//    /// </summary>
//    public abstract class ExpressionTreeActionDelegateBuilder<TParam, TParam1, TParam2, TParam3> : MethodConstructorBase, IMethodInjector
//    {
//        /// <summary>
//        /// Method to implement in order to construct the expression intended to be injected in the dynamic type
//        /// </summary>
//        /// <returns></returns>
//        protected abstract Expression<Action<TParam, TParam1, TParam2, TParam3>> Create();

//        /// <summary>
//        /// Creates a delegate pointing to the compiled method created using the expression tree
//        /// </summary>
//        /// <returns></returns>
//        public Action<TParam, TParam1, TParam2, TParam3> Delegate()
//        {
//            return this.CreateDelegate<Action<TParam, TParam1, TParam2, TParam3>>();
//        }

//        /// <summary>
//        /// Generates a dynamically compiled method using the expression tree generated by the Create method
//        /// </summary>
//        /// <returns></returns>
//        public Action<TParam, TParam1, TParam2, TParam3> Build()
//        {
//            var ex = Create();
//            return ex.Compile();
//        }

//        /// <summary>
//        /// Injects the expression tree generated by the Create method into a method builder associated to a dynamic assembly
//        /// </summary>
//        /// <param name="methodBuilder"></param>
//        public override void Inject(MethodBuilder methodBuilder)
//        {
//            var ex = Create();
//            ex.CompileToMethod(methodBuilder);
//        }
//    }

//    /// <summary>
//    /// Base class used to allow construction of custom expressions that return void
//    /// </summary>
//    public abstract class ExpressionTreeActionDelegateBuilder<TParam, TParam1, TParam2, TParam3, TParam4> : MethodConstructorBase, IMethodInjector
//    {
//        /// <summary>
//        /// Method to implement in order to construct the expression intended to be injected in the dynamic type
//        /// </summary>
//        /// <returns></returns>
//        protected abstract Expression<Action<TParam, TParam1, TParam2, TParam3, TParam4>> Create();

//        /// <summary>
//        /// Creates a delegate pointing to the compiled method created using the expression tree
//        /// </summary>
//        /// <returns></returns>
//        public Action<TParam, TParam1, TParam2, TParam3, TParam4> Delegate()
//        {
//            return this.CreateDelegate<Action<TParam, TParam1, TParam2, TParam3, TParam4>>();
//        }

//        /// <summary>
//        /// Generates a dynamically compiled method using the expression tree generated by the Create method
//        /// </summary>
//        /// <returns></returns>
//        public Action<TParam, TParam1, TParam2, TParam3, TParam4> Build()
//        {
//            var ex = Create();
//            return ex.Compile();
//        }

//        /// <summary>
//        /// Injects the expression tree generated by the Create method into a method builder associated to a dynamic assembly
//        /// </summary>
//        /// <param name="methodBuilder"></param>
//        public override void Inject(MethodBuilder methodBuilder)
//        {
//            var ex = Create();
//            ex.CompileToMethod(methodBuilder);
//        }
//    }
//}
